{"version":3,"sources":["assets/images/jordanphoto.png","component/bird.js","component/level.js","component/game.js","component/main.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","jordanPic","Image","src","jordan","CONSTANTS","Bird","dimensions","this","x","width","y","height","vel","Math","abs","ctx","moveBird","drawBird","drawImage","left","right","top","bottom","aboveTheTop","belowTheBottom","Level","firstPipeDistance","pipes","randomPipe","heightRange","gapTop","random","topPipe","bottomPipe","passed","drawBackground","movePipes","drawPipes","fillStyle","fillRect","bird","callback","eachPipe","pipe","shift","newX","push","forEach","bind","_overlap","rect1","rect2","collision","FlappyBird","canvas","getContext","registerEvents","restart","running","animate","score","level","boundClickHandler","click","addEventListener","e","play","flap","collidesWith","bounds","outOfBounds","gameOver","alert","passedPipe","console","log","drawScore","requestAnimationFrame","loc","font","fillText","strokeStyle","lineWidth","strokeText","Main","useEffect","document","getElementById","Fragment","App","className","id","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c81ac42e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/jordanphoto.0b0cf605.png\";","import jordan from '../assets/images/jordanphoto.png';\n\nconst jordanPic = new Image();\njordanPic.src = jordan;\n\nconst CONSTANTS = {\n  GRAVITY:  0.4,\n  FLAP_SPEED:  8,\n  TERMINAL_VEL:  12,\n  BIRD_WIDTH:  80,\n  BIRD_HEIGHT:  60\n};\n\nexport default class Bird {\n\n  constructor(dimensions) {\n    this.dimensions = dimensions;\n    this.x = this.dimensions.width / 3;\n    this.y = this.dimensions.height / 2;\n    this.vel = 0;\n  }\n\n  flap() {\n    //if this were a more realistic bird simulation, we would be adding to the velocity\n    //instead of just assigning it outright\n    //to make the experience more fun and 'bouncy' we just set it directly\n    this.vel = -1 * CONSTANTS.FLAP_SPEED;\n  }\n\n  moveBird() {\n    //for each frame, the bird should move by it's current velocity\n    //velocity is 'pixels per frame', so each frame it should update position by vel\n    this.y += this.vel;\n    //the acceleration of gravity is in pixels per second per second\n    //so each second, it changes the velocity by whatever the gravity constant is\n    this.vel += CONSTANTS.GRAVITY;\n    //we set a 'terminal velocity', a maximum speed the bird can travel\n    //this keeps the game from becoming too wild because the bird is moving too fast to control\n    if (Math.abs(this.vel) > CONSTANTS.TERMINAL_VEL) {\n      //if the terminal velocity is exceeded, we set it to the terminal velicty\n      if (this.vel > 0) {\n        this.vel = CONSTANTS.TERMINAL_VEL;\n      } else {\n        this.vel = CONSTANTS.TERMINAL_VEL * -1;\n      }\n    }\n  }\n\n  animate(ctx) {\n    this.moveBird();\n    this.drawBird(ctx);\n  }\n\n  drawBird(ctx){\n    ctx.drawImage(jordanPic, this.x, this.y, CONSTANTS.BIRD_WIDTH, CONSTANTS.BIRD_HEIGHT);\n    // ctx.fillStyle = \"yellow\";\n    // ctx.fillRect(this.x, this.y, CONSTANTS.BIRD_WIDTH, CONSTANTS.BIRD_HEIGHT);\n  }\n\n  bounds() {\n    return {\n      left: this.x,\n      right: this.x + CONSTANTS.BIRD_WIDTH,\n      top: this.y,\n      bottom: this.y + CONSTANTS.BIRD_HEIGHT\n    };\n  }\n\n  outOfBounds() {\n    const aboveTheTop = this.y < 0;\n    const belowTheBottom = this.y + CONSTANTS.BIRD_HEIGHT > this.dimensions.height;\n    return aboveTheTop || belowTheBottom;\n  }\n}\n","const CONSTANTS = {\n  PIPE_SPEED: 2,\n  GAP_HEIGHT: 160, //pipe gap\n  PIPE_WIDTH: 50,\n  EDGE_BUFFER: 50,\n  PIPE_SPACING: 220,\n  WARM_UP_SECONDS: 1\n};\n\nexport default class Level {\n  constructor(dimensions) {\n    this.dimensions = dimensions;\n    \n    const firstPipeDistance = \n      this.dimensions.width + \n      (CONSTANTS.WARM_UP_SECONDS * 60 * CONSTANTS.PIPE_SPEED);\n\n    this.pipes = [\n      this.randomPipe(firstPipeDistance),\n      this.randomPipe(firstPipeDistance + CONSTANTS.PIPE_SPACING),\n      this.randomPipe(firstPipeDistance + (CONSTANTS.PIPE_SPACING * 2)),\n    ];\n  }\n\n  randomPipe(x) {\n    const heightRange = this.dimensions.height - (2 * CONSTANTS.EDGE_BUFFER) - CONSTANTS.GAP_HEIGHT;\n    const gapTop = (Math.random() * heightRange) + CONSTANTS.EDGE_BUFFER;\n    const pipe = {\n      topPipe: {\n        left: x, \n        right: CONSTANTS.PIPE_WIDTH + x, \n        top: 0, \n        bottom: gapTop\n      },\n      bottomPipe: {\n        left: x, \n        right: CONSTANTS.PIPE_WIDTH + x, \n        top: gapTop + CONSTANTS.GAP_HEIGHT, \n        bottom: this.dimensions.height\n      },\n      passed: false\n    };\n    return pipe\n  }\n\n  animate(ctx) {\n    this.drawBackground(ctx);\n    this.movePipes();\n    this.drawPipes(ctx);\n  }\n\n  drawBackground(ctx) {\n    ctx.fillStyle = \"skyblue\";\n    ctx.fillRect(0, 0, this.dimensions.width, this.dimensions.height);\n  }\n\n  passedPipe(bird, callback) {\n    this.eachPipe((pipe) => {\n      if (pipe.topPipe.right < bird.left) {\n        if (!pipe.passed) {\n          pipe.passed = true;\n          callback();\n        }\n      }\n    });\n  }\n\n  movePipes() {\n    this.eachPipe(function(pipe) {\n      pipe.topPipe.left -= CONSTANTS.PIPE_SPEED;\n      pipe.topPipe.right -= CONSTANTS.PIPE_SPEED;\n      pipe.bottomPipe.left -= CONSTANTS.PIPE_SPEED;\n      pipe.bottomPipe.right -= CONSTANTS.PIPE_SPEED;\n    });\n\n    //if a pipe has left the screen add a new one to the end\n    if (this.pipes[0].topPipe.right <= 0) {\n      this.pipes.shift();\n      const newX = this.pipes[1].topPipe.left + CONSTANTS.PIPE_SPACING;\n      this.pipes.push(this.randomPipe(newX));\n    }\n  }\n\n  drawPipes(ctx) {\n    this.eachPipe(function(pipe) {\n      ctx.fillStyle = \"green\";\n\n      //draw top pipe\n      ctx.fillRect(\n        pipe.topPipe.left, \n        pipe.topPipe.top, \n        CONSTANTS.PIPE_WIDTH, \n        pipe.topPipe.bottom - pipe.topPipe.top\n      );\n      //draw bottom pipe\n      ctx.fillRect(\n        pipe.bottomPipe.left, \n        pipe.bottomPipe.top, \n        CONSTANTS.PIPE_WIDTH, \n        pipe.bottomPipe.bottom - pipe.bottomPipe.top\n      );\n    });\n  }\n\n  eachPipe(callback) {\n    this.pipes.forEach(callback.bind(this));\n  }\n  //This method shall return true if the bird passed in is currently\n  //colliding with any pipe.\n  collidesWith(bird) {\n      //this function returns true if the the rectangles overlap\n    const _overlap = (rect1, rect2) => {\n      //check that they don't overlap in the x axis\n      if (rect1.left > rect2.right - 15 || rect1.right < rect2.left + 10) {\n        return false;\n      }\n      //check that they don't overlap in the y axis\n      if (rect1.top > rect2.bottom - 15 || rect1.bottom < rect2.top+5) {\n        return false;\n      }\n      return true;\n    };\n    let collision = false;\n    this.eachPipe((pipe) => {\n      if ( \n        //check if the bird is overlapping (colliding) with either pipe\n        _overlap(pipe.topPipe, bird) || \n        _overlap(pipe.bottomPipe, bird)\n      ) { collision = true; }\n    });\n    return collision;\n  }\n}\n","import Bird from \"./bird\";\nimport Level from \"./level\";\n\nexport default class FlappyBird {\n  constructor(canvas) {\n    this.ctx = canvas.getContext(\"2d\");\n    this.dimensions = { width: canvas.width, height: canvas.height };\n    this.registerEvents();\n    this.restart();\n  }\n\n  play() {\n    this.running = true;\n    this.animate();\n  }\n\n  restart() {\n    this.running = false;\n    this.score = 0;\n    this.bird = new Bird(this.dimensions);\n    this.level = new Level(this.dimensions);\n\n    this.animate();\n  }\n\n  registerEvents() {\n    this.boundClickHandler = this.click.bind(this);\n    this.ctx.canvas.addEventListener(\"mousedown\", this.boundClickHandler);\n  }\n\n  click(e) {\n    if (!this.running) {\n      this.play();\n    } \n    this.bird.flap();\n  }\n\n  gameOver() {\n    return (\n      this.level.collidesWith(this.bird.bounds()) || this.bird.outOfBounds(this.height)\n    );\n  }\n\n  //this is the key method of gaming action\n  //animate tells the game to advance one bit\n  //the bird moves, the level moves\n  //everything is redrawn to the screen\n  animate() {\n    //first we move and draw the level\n    this.level.animate(this.ctx);\n    //then we move and draw the bird\n    this.bird.animate(this.ctx);\n    //then we check to see if the game is over and let the player know\n    if (this.gameOver()) {\n      alert(this.score);\n      this.restart();\n    }\n\n    //we see if they have scored a point by passing a pipe\n    this.level.passedPipe(this.bird.bounds(), () => {\n      this.score += 1;\n      console.log(this.score);\n    });\n\n    //and draw the score\n    this.drawScore();\n\n    //if the game is NOT running, we do not animate the next frame\n    if (this.running) {\n      //This calls this function again, after around 1/60th of a second\n      requestAnimationFrame(this.animate.bind(this));\n    }\n  }\n\n  drawScore() {\n    //loc will be the location \n    const loc = {x: this.dimensions.width / 2, y: this.dimensions.height / 4}\n    this.ctx.font = \"bold 50pt serif\";\n    this.ctx.fillStyle = \"white\";\n    this.ctx.fillText(this.score, loc.x, loc.y);\n    this.ctx.strokeStyle = \"black\";\n    this.ctx.lineWidth = 2;\n    this.ctx.strokeText(this.score, loc.x, loc.y);\n  }\n}\n","import React, { useEffect } from 'react';\nimport FlappyBird from './game';\n\nexport default function Main() {\n    useEffect(() => {\n        const canvas = document.getElementById('bird-game');\n        new FlappyBird(canvas);\n    }, [])\n    return <React.Fragment/>\n}","import React from 'react';\nimport './App.css';\nimport Main from './component/main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"app-container\">\n        <canvas id=\"bird-game\" height=\"640\" width=\"480\"></canvas>\n        <Main/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}